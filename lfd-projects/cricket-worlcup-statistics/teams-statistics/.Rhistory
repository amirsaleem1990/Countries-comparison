<<<<<<< HEAD
WC_grounds$continent <- "EUROPE"
WC_grounds$Ground <- trimws(WC_grounds$Ground)
WC_grounds <- data.table::data.table(WC_grounds %>%
select(-c("Stadium", "Date", "Winner")))
WC_grounds$Year <- 2019
names(WC_grounds) <- c("Team", "Opposition", 'Ground', 'Ground_country',  'continent',  'Year')
head(WC_grounds)
head(df)
names(WC_grounds) %in% names(df)
()
rm(list = ls())
df = data.table::data.table(read.csv("ODI_matches_data.csv"))
library(dplyr)
df$Result <- ifelse(df$Result == "won" , 1, 0)
library(lubridate)
df$Year<- lubridate::year(lubridate::dmy(df$Start.Date))
df <- df %>% select(-c(X, X.1, Start.Date, Toss, Bat, Margin, BR))
df$Ground <- tolower(df$Ground)
df$Year <- (df$Year - min(df$Year)) + 1
mapping <- list(AFR = c("WI", "ZIM", "Nairobi (Gym)"),
ASIA = c("INDIA", "SL", "BDESH", "UAE", "Dubai (DSC)", "SA", "Hyderabad (Deccan)", "Colombo (SSC)",
"ICCA Dubai", "PAK", "Mumbai (BS)", "MAL"),
EUROPE = c("SCOT", "NL", "Dublin (Malahide)", "The Oval", "IRE", "ENG", "King City (NW)", "CAN"),
AUSTRALIA = c("NZ", "AUS")
)
library(plyr)
df$continent <- gsub('[[:digit:]]+', '', mapvalues(df$Ground_country,
from=unlist(mapping),
to=names(unlist(mapping))
))
library(caTools)
split<-sample.split(df$Result,SplitRatio = 0.8)
train<-subset(df, split==TRUE)
test<-subset(df, split==FALSE)
library(ranger)
model_ranger <- ranger(Result ~ ., data = train)
pred_ranger <- predict(object = model_ranger, data = test, type = "response")$predictions
sum(test$Result == ifelse(pred_ranger < 0.42, 0, 1)) / nrow(test)
WC_grounds <- data.table::data.table(read.csv("../K/WC_2019_matches_winners_grounds_and_teams.csv"))
WC_grounds$Ground <- tolower(lapply(
strsplit(as.character(WC_grounds$Stadium),","),
function(x) x[2]))
WC_grounds$Ground_country <- "ENG"
WC_grounds$continent <- "EUROPE"
WC_grounds$Ground <- trimws(WC_grounds$Ground)
WC_grounds <- data.table::data.table(WC_grounds %>%
select(-c("Stadium", "Date", "Winner")))
WC_grounds$Year <- 2019
names(WC_grounds) <- c("Team", "Opposition", 'Ground', 'Ground_country',  'continent',  'Year')
names(WC_grounds) %in% names(df)
names(df) %in% names(WC_grounds)
head(WC_grounds)
head(df)
WC_Result <- df$Result
WC_grounds <- WC_grounds %>%
select(-Result)
WC_grounds <- data.table::data.table(read.csv("../K/WC_2019_matches_winners_grounds_and_teams.csv"))
WC_grounds$Ground <- tolower(lapply(
strsplit(as.character(WC_grounds$Stadium),","),
function(x) x[2]))
WC_grounds$Ground_country <- "ENG"
WC_grounds$continent <- "EUROPE"
WC_grounds$Ground <- trimws(WC_grounds$Ground)
WC_grounds <- data.table::data.table(WC_grounds %>%
select(-c("Stadium", "Date", "Winner")))
WC_grounds$Year <- 2019
names(WC_grounds) <- c("Team", "Opposition", 'Ground', 'Ground_country',  'continent',  'Year')
head(WC_grounds)
WC_grounds <- data.table::data.table(read.csv("../K/WC_2019_matches_winners_grounds_and_teams.csv"))
head(WC_grounds)
WC_grounds <- data.table::data.table(read.csv("../K/WC_2019_matches_winners_grounds_and_teams.csv"))
WC_grounds$Ground <- tolower(lapply(
strsplit(as.character(WC_grounds$Stadium),","),
function(x) x[2]))
=======
>>>>>>> b90ebda27f84164185e26bd206d82ad4f3fc4f5d
WC_grounds$Ground_country <- "ENG"
WC_grounds$continent <- "EUROPE"
WC_grounds$Ground <- trimws(WC_grounds$Ground)
WC_grounds <- data.table::data.table(WC_grounds %>%
select(-c("Stadium", "Date")))
WC_grounds$Year <- 2019 - df_min_year + 1
names(WC_grounds) <- c("Team", "Opposition", "Result", 'Ground', 'Ground_country',  'continent',  'Year')
WC_grounds <- WC_grounds %>%
filter(!Result == "Match abandoned without a ball bowled")
WC_grounds$Result <- trimws(WC_grounds$Result)
WC_grounds$Result <- as.numeric(as.character(WC_grounds$Result) == as.character(WC_grounds$Team))
WC_Result <- WC_grounds$Result
WC_grounds <- WC_grounds %>%
select(c(Team, Result, Opposition, Ground_country, Year, continent))
head(WC)
head(WC_grounds)
head(df)
train <- df
test <- WC_grounds
library(rpart)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.0001))
length(unique(model_rpart$where))
predict(model_rpart, newdata = test)
predict(model_rpart, newdata = test)[,1]
predict(model_rpart, newdata = test, type="prob")
predict(model_rpart, newdata = test, type = "prob")
predict(model_rpart, newdata = test)
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.5, 0, 1)) / nrow(test)
for (i in seq(0.1, 1, 0.1)){
print(paste(i, sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)))
}
for (i in seq(0.3, 0.6, 0.05)){
print(paste(i, sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)))
}
for (i in seq(0.3, 0.6, 0.005)){
print(paste(i, sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)))
}
sum(test$Result == ifelse(pred_rpart < 0.3, 0, 1)) / nrow(test)
sum(test$Result == ifelse(pred_rpart < 0.31, 0, 1)) / nrow(test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.05)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
i
ii
library(rpart)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.00001))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.05)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
library(rpart)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.000001))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.05)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
library(rpart)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.00000001))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.05)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
library(rpart)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.01))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.05)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
library(rpart)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.001))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.05)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
args(rpart)
rpart
library(rpart)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.001, minbucket = 3))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.05)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.001, minbucket = 1))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.05)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.001, minbucket = 5))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.05)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.001, minbucket = 6))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.05)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.001, minbucket = 7))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.05)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.001, minbucket = 8))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.05)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.001))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.05)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
cbind(test$Team, test$Opposition, test$Result, pred_rpart)
cbind(test$Team, test$Opposition, test$Result, test$Result == ifelse(pred_rpart < 0.33, 0, 1))
model_rpart$variable.importance
library(rpart)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.001))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.005)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
rm(list = ls())
setwd("/home/amir/LFD-server/cricket-worlcup-statistics/teams-statistics")
library(ranger)
library(rpart)
library(dplyr)
library(lubridate)
library(plyr)
library(caTools)
rm(list = ls())
setwd("/home/amir/LFD-server/cricket-worlcup-statistics/teams-statistics")
df = data.table::data.table(read.csv("ODI_matches_data.csv"))
df$Result <- ifelse(df$Result == "won" , 1, 0)
df$Year<- lubridate::year(lubridate::dmy(df$Start.Date))
df <- df %>% select(-c(X, X.1, Start.Date, Toss, Bat, Margin, BR))
df$Ground <- tolower(df$Ground)
df_min_year <- min(df$Year)
df$Year <- df$Year - df_min_year + 1
mapping <- list(AFR = c("WI", "ZIM", "Nairobi (Gym)"),
ASIA = c("INDIA", "SL", "BDESH", "UAE", "Dubai (DSC)", "SA", "Hyderabad (Deccan)", "Colombo (SSC)",
"ICCA Dubai", "PAK", "Mumbai (BS)", "MAL"),
EUROPE = c("SCOT", "NL", "Dublin (Malahide)", "The Oval", "IRE", "ENG", "King City (NW)", "CAN"),
AUSTRALIA = c("NZ", "AUS")
)
df$continent <- gsub('[[:digit:]]+', '', mapvalues(df$Ground_country,
from=unlist(mapping),
to=names(unlist(mapping))
))
df <- df %>%
select(-Ground)
WC_grounds <- data.table::data.table(read.csv("../K/WC_2019_matches_winners_grounds_and_teams.csv"))
WC_grounds$Ground <- tolower(lapply(
strsplit(as.character(WC_grounds$Stadium),","),
function(x) x[2]))
WC_grounds$Ground_country <- "ENG"
WC_grounds$continent <- "EUROPE"
WC_grounds$Ground <- trimws(WC_grounds$Ground)
WC_grounds <- data.table::data.table(WC_grounds %>%
select(-c("Stadium", "Date")))
WC_grounds$Year <- 2019 - df_min_year + 1
names(WC_grounds) <- c("Team", "Opposition", "Result", 'Ground', 'Ground_country',  'continent',  'Year')
WC_grounds <- WC_grounds %>%
filter(!Result == "Match abandoned without a ball bowled")
WC_grounds$Result <- trimws(WC_grounds$Result)
WC_grounds$Result <- as.numeric(as.character(WC_grounds$Result) == as.character(WC_grounds$Team))
WC_Result <- WC_grounds$Result
WC_grounds <- WC_grounds %>%
select(c(Team, Result, Opposition, Ground_country, Year, continent))
# split<-sample.split(df$Result,SplitRatio = 0.8)
# train<-subset(df, split==TRUE)
# test<-subset(df, split==FALSE)
train <- df
test <- WC_grounds
# model_ranger <- ranger(Result ~ ., data = train, num.trees = 1500, importance = "impurity",probability = T)
# pred_ranger <- predict(object = model_ranger, data = test, type = "response")$predictions[,1]
# sum(test$Result == ifelse(pred_ranger < 0.48, 0, 1)) / nrow(test)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.001))
length(unique(model_rpart$where))
pred_rpart <- predict(model_rpart, newdata = test)
sum(test$Result == ifelse(pred_rpart < 0.33, 0, 1)) / nrow(test)
maxx <- 0
ii <- 0
for (i in seq(0.1, 1, 0.005)){
if (sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test) > maxx){
maxx <- sum(test$Result == ifelse(pred_rpart < i, 0, 1)) / nrow(test)
ii <- i
}
}
maxx
getwd()
before_Wc <- read.csv("../players_statistics_before_WC_2019.csv")
df <- before_Wc
before_Wc <- data.table(read.csv("../players_statistics_before_WC_2019.csv"))
df <- before_Wc
library(data.table)
before_Wc <- data.table(read.csv("../players_statistics_before_WC_2019.csv"))
df <- before_Wc
DF
df
library(dplyr)
all(df$Mat_bat == df$Mat_bowl)
df$Mat_bat == df$Mat_bowl
df[73,c(Mat_bat, Mat_bowl)]
df[73,]
head(df)
saqib <- read.csv(file = "clipboard")
saqib <- read.csv(file = "clipboard")
saqib <- read.csv(file = "clipboard", sep = ",")
saqib <- read.csv(file = "clipboard", sep = "\t")
read.excel <- function(header=TRUE,...) {
read.table("clipboard",sep="\t",header=header,...)
}
dat=read.excel()
dat
read.excel <- function(header=TRUE,...) {
read.table("clipboard",sep="\t")
}
<<<<<<< HEAD
ls
sum(test$Result == ifelse(pred_ranger < 0.48, 0, 1)) / nrow(test)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.00001))
library(rpart)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.00001))
model_rpart
model_rpart$splits
library(plot.rpart)
install.packages("plot.rpart")
q()
rm(list = ls())
df = data.table::data.table(read.csv("ODI_matches_data.csv"))
library(dplyr)
df$Result <- ifelse(df$Result == "won" , 1, 0)
library(lubridate)
df$Year<- lubridate::year(lubridate::dmy(df$Start.Date))
df <- df %>% select(-c(X, X.1, Start.Date, Toss, Bat, Margin, BR))
df$Ground <- tolower(df$Ground)
df_min_year <- min(df$Year)
df$Year <- df$Year - df_min_year + 1
mapping <- list(AFR = c("WI", "ZIM", "Nairobi (Gym)"),
ASIA = c("INDIA", "SL", "BDESH", "UAE", "Dubai (DSC)", "SA", "Hyderabad (Deccan)", "Colombo (SSC)",
"ICCA Dubai", "PAK", "Mumbai (BS)", "MAL"),
EUROPE = c("SCOT", "NL", "Dublin (Malahide)", "The Oval", "IRE", "ENG", "King City (NW)", "CAN"),
AUSTRALIA = c("NZ", "AUS")
)
library(plyr)
df$continent <- gsub('[[:digit:]]+', '', mapvalues(df$Ground_country,
from=unlist(mapping),
to=names(unlist(mapping))
))
WC_grounds <- data.table::data.table(read.csv("../K/WC_2019_matches_winners_grounds_and_teams.csv"))
WC_grounds$Ground <- tolower(lapply(
strsplit(as.character(WC_grounds$Stadium),","),
function(x) x[2]))
WC_grounds$Ground_country <- "ENG"
WC_grounds$continent <- "EUROPE"
WC_grounds$Ground <- trimws(WC_grounds$Ground)
WC_grounds <- data.table::data.table(WC_grounds %>%
select(-c("Stadium", "Date")))
WC_grounds$Year <- 2019 - df_min_year + 1
names(WC_grounds) <- c("Team", "Opposition", "Result", 'Ground', 'Ground_country',  'continent',  'Year')
WC_grounds <- WC_grounds %>%
filter(!Result == "Match abandoned without a ball bowled")
WC_grounds$Result <- trimws(WC_grounds$Result)
WC_grounds$Result <- as.numeric(as.character(WC_grounds$Result) == as.character(WC_grounds$Team))
WC_Result <- WC_grounds$Result
WC_grounds <- WC_grounds %>%
select(c(Team, Result, Opposition, Ground, Ground_country, Year, continent))
# library(caTools)
# split<-sample.split(df$Result,SplitRatio = 0.8)
# train<-subset(df, split==TRUE)
# test<-subset(df, split==FALSE)
train <- df
test <- WC_grounds
library(rpart)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.00001))
library(plot.rpart)
install.packages("plot.rpart")
install.packages("rpart.plot")
library(rpart.plot)
par(xpd = TRUE)
plot(model_rpart, compress = TRUE)
text(model_rpart, use.n = TRUE)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.00001))
predict(model_rpart, newdata = test)
predict(model_rpart, newdata = test, type = "prob")
predict(model_rpart, type = "prob")
rm(list = ls())
# setwd("/home/amir/LFD-server/cricket-worlcup-statistics/teams-statistics")
df = data.table::data.table(read.csv("ODI_matches_data.csv"))
library(dplyr)
df$Result <- ifelse(df$Result == "won" , 1, 0)
library(lubridate)
df$Year<- lubridate::year(lubridate::dmy(df$Start.Date))
df <- df %>% select(-c(X, X.1, Start.Date, Toss, Bat, Margin, BR))
df$Ground <- tolower(df$Ground)
df_min_year <- min(df$Year)
df$Year <- df$Year - df_min_year + 1
mapping <- list(AFR = c("WI", "ZIM", "Nairobi (Gym)"),
ASIA = c("INDIA", "SL", "BDESH", "UAE", "Dubai (DSC)", "SA", "Hyderabad (Deccan)", "Colombo (SSC)",
"ICCA Dubai", "PAK", "Mumbai (BS)", "MAL"),
EUROPE = c("SCOT", "NL", "Dublin (Malahide)", "The Oval", "IRE", "ENG", "King City (NW)", "CAN"),
AUSTRALIA = c("NZ", "AUS")
)
library(plyr)
df$continent <- gsub('[[:digit:]]+', '', mapvalues(df$Ground_country,
from=unlist(mapping),
to=names(unlist(mapping))
))
WC_grounds <- data.table::data.table(read.csv("../K/WC_2019_matches_winners_grounds_and_teams.csv"))
WC_grounds$Ground <- tolower(lapply(
strsplit(as.character(WC_grounds$Stadium),","),
function(x) x[2]))
WC_grounds$Ground_country <- "ENG"
WC_grounds$continent <- "EUROPE"
WC_grounds$Ground <- trimws(WC_grounds$Ground)
WC_grounds <- data.table::data.table(WC_grounds %>%
select(-c("Stadium", "Date")))
WC_grounds$Year <- 2019 - df_min_year + 1
names(WC_grounds) <- c("Team", "Opposition", "Result", 'Ground', 'Ground_country',  'continent',  'Year')
WC_grounds <- WC_grounds %>%
filter(!Result == "Match abandoned without a ball bowled")
WC_grounds$Result <- trimws(WC_grounds$Result)
WC_grounds$Result <- as.numeric(as.character(WC_grounds$Result) == as.character(WC_grounds$Team))
WC_Result <- WC_grounds$Result
WC_grounds <- WC_grounds %>%
select(c(Team, Result, Opposition, Ground, Ground_country, Year, continent))
# library(caTools)
# split<-sample.split(df$Result,SplitRatio = 0.8)
# train<-subset(df, split==TRUE)
# test<-subset(df, split==FALSE)
train <- df
test <- WC_grounds
# library(ranger)
# model_ranger <- ranger(Result ~ ., data = train, num.trees = 1500, importance = "impurity",probability = T)
# pred_ranger <- predict(object = model_ranger, data = test, type = "response")$predictions[,1]
# sum(test$Result == ifelse(pred_ranger < 0.48, 0, 1)) / nrow(test)
library(rpart)
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.00001))
predict(model_rpart, test)
model_rpart
model_rpart$where
unique(model_rpart$where)
sort(unique(model_rpart$where))
length(unique(model_rpart$where))
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.0001))
length(unique(model_rpart$where))
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.001))
length(unique(model_rpart$where))
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.01))
length(unique(model_rpart$where))
model_rpart <- rpart(Result ~ ., data = train, control = rpart.control(cp= 0.0001))
length(unique(model_rpart$where))
dim(train)
dim(test)
predict(model_rpart, newdata = test, type="prob")
q()
=======
dat=read.excel()
readClipboard()
library(psych)
read.clipboad()
library(psych)
read.clipboad()
read.clipboard()
read.clipboard.csv()
read.clipboard.csv()
getwd()
saqib <- read.csv("saqil-players.csv")
saqib
df
df$
head(df$Player)
head(saqib$Name)
saqib$Name <- tolower(saqib$Name)
unique(saqib$Name)
unique(df$Player)
saqib$Name %in% df$Player
sum(saqib$Name %in% df$Player)
sum(saqib$Name %in% df$Player) / nrow(saqib)
saqib$Name %in% df$Player
!saqib$Name %in% df$Player
!saqib$Name %in% df$Player
saqib$Name %in% df$Player
adf <- df %>% filter(!saqib$Name %in% df$Player)
adf <- df[!saqib$Name %in% df$Player,])
adf <- df[!saqib$Name %in% df$Player,]
df
!saqib$Name %in% df$Player
df[!saqib$Name %in% df$Player]
df[!saqib$Name %in% df$Player,]
df[!df$Player %in% saqib$Name,]
adf <- df[!df$Player %in% saqib$Name,]
nrow(adf)
nrow(df)
sum(df$Player %in% saqib$Name)
adf <- df[!df$Player %in% saqib$Name,]
as <- saqib[!saqib$Name %in% df$Player,]
nrow(s)
nrow(as)
nrow(saqib)
df <- before_Wc
saqib <- read.csv("saqil-players.csv")
saqib$Name <- tolower(saqib$Name)
adf <- df[!df$Player %in% saqib$Name,]
as <- saqib[!saqib$Name %in% df$Player,]
adf
sa
as
cbind(as$Name, adf$Player)
adf$Player
nrow(adf)
nrow(as)
cbind(as$Name[1:104], adf$Player[1:104])
cbind(adf$Player[1:104], as$Name[1:104])
adf$Player[1:104]
as$Name[1:104]
cbind(adf$Player[1:104], as$Name[1:104])
cbind(as.character(adf$Player[1:104]), as$Name[1:104])
cbind(sort(as.character(adf$Player[1:104])), sort(as$Name[1:104]))
write.csv(cbind(sort(as.character(adf$Player[1:104])), sort(as$Name[1:104])), file = "player_names_not_matched.csv")
diff <- cbind(sort(as.character(adf$Player[1:104])), sort(as$Name[1:104])
write.csv(diff), file = "player_names_not_matched.csv")
diff <- cbind(sort(as.character(adf$Player[1:104])), sort(as$Name[1:104])
write.csv(diff), file = "player_names_not_matched.csv")
diff <- cbind(sort(as.character(adf$Player[1:104])), sort(as$Name[1:104])
write.csv(diff), file = "player_names_not_matched.csv")
diff <- cbind(sort(as.character(adf$Player[1:104])), sort(as$Name[1:104]))
write.csv(diff, file = "player_names_not_matched.csv")
diff
diff <- data.frame(cbind(sort(as.character(adf$Player[1:104])), sort(as$Name[1:104])))
diff
strsplit(diff$X1)
strsplit(diff$X1, " ")
strsplit(as.character(diff$X1), " ")
strsplit(as.character(diff$X1), " ")[2]
strsplit(as.character(diff$X1), " ")[,2]
strsplit(as.character(diff$X1), " ")[2,]
strsplit(as.character(diff$X1), " ")[[2]]
lapply(as.character(diff$X1), function(x) strsplit(x, " ")[[2]]
lapply(as.character(diff$X1), function(x) strsplit(x, " ")[[2]]}}
lapply(as.character(diff$X1), function(x) strsplit(x, " ")[[2]]}
lapply(as.character(diff$X1), function(x) strsplit(x, " ")[[2]])
lapply(as.character(diff$X1), function(x) strsplit(x, " "))
lapply(as.character(diff$X1), function(x) strsplit(x, " ")[2])
lapply(as.character(diff$X1), function(x) strsplit(x, " ")[[2]])
lapply(as.character(diff$X1), function(x) strsplit(x, " "))
lapply(as.character(diff$X1), function(x) strsplit(x, " ")[2])
lapply(as.character(diff$X1), function(x) strsplit(x, " ")[,2])
lapply(as.character(diff$X1), function(x) strsplit(x, " ")[[,2]])
lapply(as.character(diff$X1), function(x) strsplit(x, " ")[2])
lapply(as.character(diff$X1), function(x) strsplit(x, " "))
lapply(diff$X1, function(x) strsplit(x, " "))
apply(diff$X1, function(x) strsplit(x, " "))
sapply(diff$X1, function(x) strsplit(x, " "))
sapply(as.character(diff$X1), function(x) strsplit(x, " "))
sapply(as.character(diff$X1), function(x) strsplit(x, " ")[2])
sapply(as.character(diff$X1), function(x) strsplit(x, " ")[[2]])
sapply(as.character(diff$X1), function(x) strsplit(x, " "))
sapply(as.character(diff$X1), function(x) strsplit(x, " "))[,2]
sapply(as.character(diff$X1), function(x) strsplit(x, " "))[2]
sapply(as.character(diff$X1), function(x) strsplit(x, " "))[[2]]
sapply(as.character(diff$X1), function(x) strsplit(x, " ")]
sapply(as.character(diff$X1), function(x) strsplit(x, " "))
sapply(as.character(diff$X1), function(x) strsplit(x, " ")[1])
sapply(as.character(diff$X1), function(x) strsplit(x, " ")[2])
sapply(as.character(diff$X1), function(x) strsplit(x, " ")[[2]])
sapply(as.character(diff$X1), function(x) strsplit(x, " ")[1])
sapply(as.character(diff$X1), function(x) strsplit(x, " ")[[1]])
sapply(as.character(diff$X1), function(x) strsplit(x, " ")[[[1]]])
sapply(as.character(diff$X1), function(x) strsplit(x, " ")[[1]])
sapply(as.character(diff$X1), function(x) strsplit(x, " ")[[2]])
sapply(as.character(diff$X1), function(x) strsplit(x, " ")[[1]])
sapply(as.character(diff$X1), function(x) strsplit(x, " ")[1])
sapply(as.character(diff$X1), function(x){
strsplit(x, " ")[1])}
sapply(as.character(diff$X1), function(x){
strsplit(x, " ")[1]
})
sapply(as.character(diff$X1), function(x){
strsplit(x, " ")[2]
})
sapply(as.character(diff$X1), function(x){
strsplit(x, " ")[[2]]
})
lapply(as.character(diff$X1), function(x){
strsplit(x, " ")[[2]]
})
lapply(as.character(diff$X1), function(x){
strsplit(x, " ")[2]
})
lapply(strsplit(as.character(diff$X1), " "))
lapply(strsplit(as.character(diff$X1), " "),
ffunction(x) x[2])
lapply(strsplit(as.character(diff$X1), " "),
function(x) x[2])
lapply(strsplit(as.character(diff$X1), " "),
function(x) x[2]) == "chahal"
lapply(strsplit(as.character(diff$X1), " "),
function(x) x[2]) == lapply(strsplit(as.character(diff$X2), " "),
function(x) x[2])
(lapply(strsplit(as.character(diff$X1), " "),
function(x) x[2])) == (lapply(strsplit(as.character(diff$X2), " "),
function(x) x[2]))
a = lapply(strsplit(as.character(diff$X1), " "),
function(x) x[2])
b = lapply(strsplit(as.character(diff$X2), " "),
function(x) x[2])
a
b
a == b
a
b
a
b
a = lapply(strsplit(as.character(diff$X1), " "),
function(x) x[[2]])
b = lapply(strsplit(as.character(diff$X2), " "),
function(x) x[2[]])
a
b
a == b
class(a)
class(b)
a
a[1]
a[1] == b[1]
a[[1]] == b[[1]]
a
a %in% b
b %in% a
a[a %in% a,]
a[a %in% a]
diff[a %in% a]
diff[a %in% a,]
diff$X1O <- a
diff$X20 <- b
diff
load("/home/lfd-server/Desktop/Jazz/final_Ranger_model/new-7-jul-2019/final_Ranger_model1.rda")
>>>>>>> b90ebda27f84164185e26bd206d82ad4f3fc4f5d
